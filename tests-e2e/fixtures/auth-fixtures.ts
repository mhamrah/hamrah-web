import { test as base, expect, Page } from '@playwright/test';

// Test data for authentication flows
export const testData = {
  users: {
    john: {
      email: 'john.doe@example.com',
      name: 'John Doe',
      password: 'TestPassword123!',
    },
    jane: {
      email: 'jane.smith@example.com', 
      name: 'Jane Smith',
      password: 'SecurePass456!',
    },
  },
  googleUser: {
    email: 'test@gmail.com',
    name: 'Test User',
    // Mock Google ID token (this would be generated by Google in real scenario)
    idToken: 'eyJhbGciOiJSUzI1NiIsImtpZCI6InRlc3Qta2V5LWlkIn0.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXVkIjoidGVzdC1nb29nbGUtY2xpZW50LWlkIiwic3ViIjoiMTIzNDU2Nzg5MCIsImVtYWlsIjoidGVzdEBnbWFpbC5jb20iLCJuYW1lIjoiVGVzdCBVc2VyIiwiaWF0IjoxNjQwOTk1MjAwLCJleHAiOjE2NDA5OTg4MDB9.test-signature',
  },
};

// Mock WebAuthn credentials
export const mockCredentials = {
  validCredential: {
    id: 'test-credential-id-base64',
    rawId: new Uint8Array([1, 2, 3, 4, 5]),
    type: 'public-key',
    response: {
      clientDataJSON: new Uint8Array([6, 7, 8, 9, 10]),
      attestationObject: new Uint8Array([11, 12, 13, 14, 15]),
    },
  },
  authenticationCredential: {
    id: 'test-credential-id-base64',
    rawId: new Uint8Array([1, 2, 3, 4, 5]),
    type: 'public-key',
    response: {
      clientDataJSON: new Uint8Array([6, 7, 8, 9, 10]),
      authenticatorData: new Uint8Array([16, 17, 18, 19, 20]),
      signature: new Uint8Array([21, 22, 23, 24, 25]),
      userHandle: new Uint8Array([26, 27, 28, 29, 30]),
    },
  },
};

// Extended test fixture with auth utilities
type AuthFixtures = {
  authPage: AuthPage;
};

export class AuthPage {
  constructor(public page: Page) {}

  // Navigation helpers
  async goToLogin() {
    await this.page.goto('/auth/login');
    await this.page.waitForLoadState('networkidle');
  }

  async goToRegister() {
    await this.page.goto('/auth/register');
    await this.page.waitForLoadState('networkidle');
  }

  // Google OAuth flow helpers
  async clickGoogleSignIn() {
    await this.page.click('[data-testid="google-signin-button"]');
  }

  async mockGoogleOAuth() {
    // Mock Google OAuth popup
    await this.page.route('**/auth/google', async (route) => {
      // Simulate successful Google OAuth redirect
      await route.fulfill({
        status: 302,
        headers: {
          'Location': '/auth/google/callback?code=mock-google-auth-code&state=mock-state',
        },
      });
    });

    // Mock Google token exchange
    await this.page.route('**/auth/google/callback*', async (route) => {
      await route.fulfill({
        status: 302,
        headers: {
          'Location': '/?auth=success',
        },
      });
    });
  }

  // Passkey helpers
  async clickPasskeySignIn() {
    await this.page.click('[data-testid="passkey-signin-button"]');
  }

  async fillEmailForPasskey(email: string) {
    await this.page.fill('[data-testid="passkey-email-input"]', email);
    await this.page.click('[data-testid="passkey-continue-button"]');
  }

  async mockWebAuthnRegistration() {
    await this.page.addInitScript(() => {
      // Mock navigator.credentials.create for registration
      Object.defineProperty(navigator, 'credentials', {
        value: {
          create: async (options: any) => {
            return {
              id: 'test-credential-id-base64',
              rawId: new Uint8Array([1, 2, 3, 4, 5]),
              type: 'public-key',
              response: {
                clientDataJSON: new Uint8Array([6, 7, 8, 9, 10]),
                attestationObject: new Uint8Array([11, 12, 13, 14, 15]),
              },
            };
          },
          get: async (options: any) => {
            return {
              id: 'test-credential-id-base64',
              rawId: new Uint8Array([1, 2, 3, 4, 5]),
              type: 'public-key',
              response: {
                clientDataJSON: new Uint8Array([6, 7, 8, 9, 10]),
                authenticatorData: new Uint8Array([16, 17, 18, 19, 20]),
                signature: new Uint8Array([21, 22, 23, 24, 25]),
                userHandle: new Uint8Array([26, 27, 28, 29, 30]),
              },
            };
          },
        },
        writable: true,
      });

      // Mock PublicKeyCredential
      (window as any).PublicKeyCredential = {
        isUserVerifyingPlatformAuthenticatorAvailable: async () => true,
        isConditionalMediationAvailable: async () => true,
      };
    });
  }

  async mockWebAuthnAPIs() {
    // Mock WebAuthn begin registration
    await this.page.route('**/api/webauthn/register/begin', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          success: true,
          options: {
            challenge: 'mock-challenge-base64',
            rp: { id: 'localhost', name: 'Hamrah Test' },
            user: { id: 'user-id-base64', name: 'test@example.com', displayName: 'Test User' },
            pubKeyCredParams: [{ alg: -7, type: 'public-key' }],
            timeout: 60000,
            attestation: 'none',
            authenticatorSelection: {
              authenticatorAttachment: 'platform',
              userVerification: 'required',
            },
          },
        }),
      });
    });

    // Mock WebAuthn complete registration
    await this.page.route('**/api/webauthn/register/complete', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          success: true,
          user: {
            id: 'test-user-id',
            email: 'test@example.com',
            name: 'Test User',
            authMethod: 'webauthn',
            createdAt: new Date().toISOString(),
          },
          accessToken: 'mock-access-token',
          refreshToken: 'mock-refresh-token',
        }),
      });
    });

    // Mock WebAuthn begin authentication
    await this.page.route('**/api/webauthn/authenticate/begin', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          success: true,
          options: {
            challenge: 'mock-auth-challenge-base64',
            timeout: 60000,
            rpId: 'localhost',
            allowCredentials: [
              {
                id: 'test-credential-id-base64',
                type: 'public-key',
                transports: ['internal'],
              },
            ],
            userVerification: 'required',
          },
        }),
      });
    });

    // Mock WebAuthn complete authentication
    await this.page.route('**/api/webauthn/authenticate/complete', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          success: true,
          user: {
            id: 'test-user-id',
            email: 'test@example.com',
            name: 'Test User',
            authMethod: 'webauthn',
            createdAt: new Date().toISOString(),
          },
          accessToken: 'mock-access-token',
          refreshToken: 'mock-refresh-token',
        }),
      });
    });
  }

  // Authentication state helpers
  async expectToBeLoggedIn() {
    await expect(this.page.locator('[data-testid="user-menu"]')).toBeVisible();
    await expect(this.page.locator('[data-testid="logout-button"]')).toBeVisible();
  }

  async expectToBeLoggedOut() {
    await expect(this.page.locator('[data-testid="login-button"]')).toBeVisible();
    await expect(this.page.locator('[data-testid="user-menu"]')).not.toBeVisible();
  }

  async logout() {
    await this.page.click('[data-testid="user-menu"]');
    await this.page.click('[data-testid="logout-button"]');
    await this.page.waitForLoadState('networkidle');
  }

  // Form helpers
  async fillLoginForm(email: string, password: string) {
    await this.page.fill('[data-testid="email-input"]', email);
    await this.page.fill('[data-testid="password-input"]', password);
  }

  async submitLoginForm() {
    await this.page.click('[data-testid="login-submit-button"]');
  }

  // Error message helpers
  async expectErrorMessage(message: string) {
    await expect(this.page.locator('[data-testid="error-message"]')).toContainText(message);
  }

  async expectSuccessMessage(message: string) {
    await expect(this.page.locator('[data-testid="success-message"]')).toContainText(message);
  }

  // Wait helpers
  async waitForAuthRedirect() {
    await this.page.waitForURL(url => url.pathname === '/' || url.searchParams.has('auth'));
  }

  async waitForLoginPage() {
    await this.page.waitForURL('/auth/login');
  }
}

// Extend base test with auth fixtures
export const test = base.extend<AuthFixtures>({
  authPage: async ({ page }, use) => {
    const authPage = new AuthPage(page);
    await use(authPage);
  },
});

export { expect };