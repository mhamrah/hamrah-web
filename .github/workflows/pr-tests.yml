name: Pull Request Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

# Cancel previous runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  quick-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          # Fetch PR head commit
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Check formatting
        run: pnpm fmt.check

      - name: Run linting
        run: pnpm lint

      - name: Type checking
        run: pnpm build.types

  test-coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: pr-${{ github.event.pull_request.number }}

      - name: Comment coverage results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');

            // Try to read coverage summary
            let coverageComment = '📊 **Test Coverage Report**\n\n';

            try {
              if (fs.existsSync('./coverage/coverage-summary.json')) {
                const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
                const total = coverage.total;
                
                coverageComment += `| Metric | Coverage | Threshold |\n`;
                coverageComment += `|--------|----------|----------|\n`;
                coverageComment += `| Lines | ${total.lines.pct}% | 80% |\n`;
                coverageComment += `| Functions | ${total.functions.pct}% | 80% |\n`;
                coverageComment += `| Branches | ${total.branches.pct}% | 80% |\n`;
                coverageComment += `| Statements | ${total.statements.pct}% | 80% |\n\n`;
                
                // Check if coverage meets thresholds
                const meetsThreshold = total.lines.pct >= 80 && 
                                     total.functions.pct >= 80 && 
                                     total.branches.pct >= 80 && 
                                     total.statements.pct >= 80;
                
                if (meetsThreshold) {
                  coverageComment += '✅ All coverage thresholds met!\n';
                } else {
                  coverageComment += '❌ Some coverage thresholds not met. Please add more tests.\n';
                }
              } else {
                coverageComment += 'Coverage report not found. Tests may have failed.\n';
              }
            } catch (error) {
              coverageComment += `Error reading coverage report: ${error.message}\n`;
            }

            // Find existing coverage comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('📊 **Test Coverage Report**')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverageComment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverageComment
              });
            }

  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Test build
        run: pnpm build

      - name: Validate build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi
          echo "✅ Build successful - dist directory created"

  e2e-sample:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quick-checks, build-test]
    # Only run E2E for substantial changes
    if: >
      contains(github.event.pull_request.changed_files, 'src/routes/') ||
      contains(github.event.pull_request.changed_files, 'src/components/') ||
      contains(github.event.pull_request.title, '[e2e]')

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Start dev server
        run: pnpm dev &
        env:
          NODE_ENV: test

      - name: Wait for server
        run: |
          timeout 60s bash -c 'until curl -f --insecure https://localhost:5173/; do sleep 2; done'

      - name: Run critical E2E tests
        run: |
          # Run only critical/smoke E2E tests for PRs
          pnpm exec playwright test --grep "@critical|@smoke"

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-pr-${{ github.event.pull_request.number }}
          path: playwright-report/
          retention-days: 7

  security-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: quick-checks

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Security audit
        run: pnpm audit --audit-level moderate

  pr-summary:
    runs-on: ubuntu-latest
    needs: [quick-checks, test-coverage, build-test, security-check]
    if: always()

    steps:
      - name: PR Test Summary
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};

            let summary = '## 🧪 PR Test Summary\n\n';
            let allPassed = true;

            const jobs = [
              { name: 'Quick Checks', key: 'quick-checks' },
              { name: 'Test Coverage', key: 'test-coverage' },
              { name: 'Build Test', key: 'build-test' },
              { name: 'Security Check', key: 'security-check' }
            ];

            jobs.forEach(job => {
              const result = needs[job.key];
              const icon = result.result === 'success' ? '✅' : 
                          result.result === 'failure' ? '❌' : 
                          result.result === 'skipped' ? '⏭️' : '⚠️';
              
              summary += `${icon} **${job.name}**: ${result.result}\n`;
              
              if (result.result !== 'success' && result.result !== 'skipped') {
                allPassed = false;
              }
            });

            if (allPassed) {
              summary += '\n🎉 **All tests passed!** This PR is ready for review.';
            } else {
              summary += '\n⚠️ **Some tests failed.** Please review and fix issues before merging.';
            }

            // Update or create PR summary comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('🧪 PR Test Summary')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
